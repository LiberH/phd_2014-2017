%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Jean-Luc BÃ©chennec at 2016-05-17 18:00:26 +0200


%% Saved with string encoding Unicode (UTF-8)

@misc{graphviz,
    title = {Graphviz -- Graph Vizualisation Software},
    howpublished = {\url{http://www.graphviz.org}},
    note = {Accessed: 2016-05-18}
}


@inproceedings{Gustafsson:WCET2010:Benchmarks,
	Author = {Jan Gustafsson and Adam Betts and Andreas Ermedahl and Bj{\"{o}}rn Lisper},
	Booktitle = {International Workshop on Worst-Case Execution Time Analysis (WCET)},
	Title = {The {M{\"a}lardalen} {WCET} Benchmarks -- Past, Present and Future},
	Year = {2010}}

@inproceedings{bechennec2006trampoline,
	Author = {Jean-Luc B{\'{e}}chennec and Mika{\"{e}}l Briday and S{\'{e}}bastien Faucou and Yvon Trinquet},
	Booktitle = {IEEE International Conference on Emerging Technologies and Factory Automation (ETFA)},
	Date-Added = {2016-05-17 15:59:25 +0000},
	Date-Modified = {2016-05-17 15:59:25 +0000},
	Title = {Trampoline An Open Source Implementation of the {OSEK/VDX} {RTOS} Specification},
	Year = {2006},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ETFA.2006.355432}}

@inproceedings{DOT10,
	Author = {Dalsgaard, Andreas E. and Olesen, Mads C. and Toft, Martin and Hansen, Ren{\'e} R. and Larsen, Kim G.},
	Booktitle = {International Workshop on Worst-Case Execution Time Analysis (WCET)},
	Title = {{METAMOC: Modular Execution Time Analysis using Model Checking}},
	Year = {2010}}

@inproceedings{CB13,
	Author = {Cassez, Franck and B\'echennec, Jean-Luc},
	Booktitle = {International Conference on Application of Concurrency to System Design (ACSD)},
	Date-Modified = {2016-04-05 11:51:29 +0000},
	Title = {{Timing Analysis of Binary Programs with UPPAAL}},
	Year = {2013}}

@inproceedings{Wil04,
	Author = {Wilhelm, Reinhard},
	Booktitle = {International Conference on Verification, Model Checking and Abstract Interpretation (VMCAI)},
	Title = {{Why AI + ILP is Good for WCET, but MC is not, nor ILP alone}},
	Year = {2004}}

@inproceedings{Wei81,
	Author = {Weiser, Mark},
	Booktitle = {International Conference on Software Engineering (ICSE)},
	Title = {{Program Slicing}},
	Year = {1981}}

@inproceedings{OO84,
        title = {The program dependence graph in a software development environment},
        author = {Ottenstein, Karl J and Ottenstein, Linda M},
        booktitle = {ACM Sigplan Notices},
        volume = {19},
	number = {5},
	pages = {177--184},
	year = {1984},
	organization = {ACM}
}

@inproceedings{Agr94,
        title = {On slicing programs with jump statements},
        author = {Agrawal, Hiralal},
        booktitle = {ACM Sigplan Notices},
        volume = {29},
	number = {6},
	pages = {302--312},
	year = {1994},
	organization = {ACM}
}

@article{HSR90,
        title = {Interprocedural slicing using dependence graphs},
        author = {Horwitz, Susan and Reps, Thomas and Binkley, David},
        journal = {ACM Transactions on Programming Languages and Systems (TOPLAS)},
        volume = {12},
	number = {1},
	pages = {26--60},
	year = {1990},
	publisher = {ACM}
}

@article{Tip95,
	Author = {Tip, Frank},
	Journal = {Journal of programming languages},
	Number = {3},
	Title = {{A Survey of Program Slicing Techniques}},
	Volume = {3},
	Year = {1995}}

@inproceedings{KJL03,
	Author = {Kiss, Akos and J{\'a}sz, Judit and Lehotai, G{\'a}bor and Gyim{\'o}thy, Tibor},
	Booktitle = {International Workshop on Source Code Analysis and Manipulation},
	Title = {{Interprocedural Static Slicing of Binary Executables}},
	Year = {2003}}

@article{FOW87,
	author = {Ferrante, Jeanne and Ottenstein, Karl J and Warren, Joe D},
	title = {The program dependence graph and its use in optimization},
	journal = {ACM Transactions on Programming Languages and Systems (TOPLAS)},
	volume = {9},
	number = {3},
	pages = {319--349},
	year = {1987},
	publisher = {ACM}
}

@article{DJK11,
	Author = {Dezs{\H{o}}, Bal{\'a}zs and J{\"u}ttner, Alp{\'a}r and Kov{\'a}cs, P{\'e}ter},
	Journal = {ENTCS},
	Number = {5},
	Pages = {23--45},
	Title = {{LEMON -- an Open Source C++ Graph Template Library}},
	Volume = {264},
	Year = {2011}}

@article{KBB12,
	Author = {Kassem, Rola and Briday, Mika{\"e}l and B{\'e}chennec, Jean-Luc and Savaton, Guillaume and Trinquet, Yvon},
	Journal = {JSA},
	Number = {8},
	Pages = {318-337},
	Title = {Harmless, a Hardware Architecture Description Language Dedicated to Real-Time Embedded System Simulation},
	Volume = {58},
	Year = {2012}}

@article{LPY97,
	Author = {Larsen, Kim G. and Pettersson, Paul and Yi, Wang},
	Journal = {STTT},
	Number = {1-2},
	Pages = {134-152},
	Title = {{UPPAAL in a Nutshell}},
	Volume = {1},
	Year = {1997}}

@InProceedings{Cassez15,
  Title                    = {Timed Automata for Modeling Caches and Pipelines},
  Author                   = {Franck Cassez and
 Pablo Gonz{\'{a}}lez de Aledo Marug{\'{a}}n},
  Booktitle                = {Workshop on Models for Formal Analysis of Real Systems ({MARS})},
  Year                     = {2015},

  Abstract                 = {In this paper, we focus on modelling the timing aspects of binary programs running on architectures featuring caches and pipelines. The objective is to obtain a timed automaton model to compute tight bounds for the worst-case execution time (WCET) of the programs using model-checking tehcniques.},
  Bibsource                = {dblp computer science bibliography, http://dblp.org},
  Biburl                   = {http://dblp.uni-trier.de/rec/bib/journals/corr/CassezM15},
  Doi                      = {10.4204/EPTCS.196.4},
  File                     = {:home/sebastien/Documents/jabrefdb/Cassez15.pdf:PDF},
  Owner                    = {sebastien},
  Timestamp                = {Wed, 02 Dec 2015 15:57:04 +0100},
  Url                      = {http://dx.doi.org/10.4204/EPTCS.196.4}
}

@InProceedings{Gustavsson2010,
  Title                    = {Towards {WCET} Analysis of Multicore Architectures Using {UPPAAL}},
  Author                   = {Andreas Gustavsson and
 Andreas Ermedahl and
 Bj{\"{o}}rn Lisper and
 Paul Pettersson},
  Booktitle                = {International Workshop on Worst-Case Execution Time Analysis,
 ({WCET})},
  Year                     = {2010},

  Abstract                 = {To take full advantage of the increasingly used shared-memory multicore architectures, software algorithms will need to be parallelized over multiple threads. This means that threads will have to share resources (e.g. some level of cache) and communicate and synchronize with each other. There already exist software libraries (e.g. OpenMP) used to explicitly parallelize available sequential C/C++ and Fortran code, which means that parallel code could be easily obtained. To be able to use parallel software running on multicore architectures in embedded systems with hard real-time constraints, new WCET (Worst-Case Execution Time) analysis methods and tools must be developed. This paper investigates a method based on model-checking a system of timed automata using the UPPAAL tool box. It is found that it is possible to perform WCET analysis on (small) parallel systems using UPPAAL. We also show how to model thread synchronization using spinlock-like primitives},
  Bibsource                = {dblp computer science bibliography, http://dblp.org},
  Biburl                   = {http://dblp.uni-trier.de/rec/bib/conf/wcet/GustavssonELP10},
  Doi                      = {10.4230/OASIcs.WCET.2010.101},
  File                     = {:home/sebastien/Documents/jabrefdb/Gustavsson2010.pdf:PDF},
  Owner                    = {sebastien},
  Timestamp                = {Sat, 08 Jan 2011 11:59:47 +0100},
  Url                      = {http://dx.doi.org/10.4230/OASIcs.WCET.2010.101}
}
@InProceedings{Lokuciejewski2009,
  Title                    = {A Fast and Precise Static Loop Analysis Based on Abstract Interpretation,
 Program Slicing and Polytope Models},
  Author                   = {Paul Lokuciejewski and
 Daniel Cordes and
 Heiko Falk and
 Peter Marwedel},
  Booktitle                = {International Symposium on Code Generation and Optimization (CGO)},
  Year                     = {2009},
  Pages                    = {136--146},
}

@InProceedings{Sandberg2006,
  Title                    = {Faster {WCET} flow analysis by program slicing},
  Author                   = {Christer Sandberg and
 Andreas Ermedahl and
 Jan Gustafsson and
 Bj{\"{o}}rn Lisper},
  Booktitle                = {{ACM} {SIGPLAN/SIGBED} Conference on Languages,
 Compilers, and Tools for Embedded Systems (LCTES)},
  Year                     = {2006},
  Pages                    = {103--112},

  Abstract                 = {Static Worst-Case Execution Time (WCET) analysis is a technique to derive upper bounds for the execution times of programs. Such bounds are crucial when designing and verifying real-time systems. WCET analysis needs a program flow analysis to derive constraints on the possible execution paths of the analysed program, like iteration bounds for loops and dependences between conditionals.Current WCET analysis tools typically obtain flow information through manual annotations. Better support for automatic flow analysis would eliminate much of the need for this laborious work. However, to automatically derive high-quality flow information is hard, and solution techniques with large time and space complexity are often required.In this paper we describe how to use program slicing to reduce the computational need of flow analysis methods. The slicing identifes statements and variables which are guaranteed not to influence the program flow. When these are removed, the calculation time of our different flow analyses decreases, in some cases considerably.We also show how program slicing can be used to identify the input variables and globals that control the outcome of a particular loop or conditional. This should be valuable aid when performing WCET analysis and systematic testing of large and complex real-time programs.},
  Bibsource                = {dblp computer science bibliography, http://dblp.org},
  Biburl                   = {http://dblp.uni-trier.de/rec/bib/conf/lctrts/SandbergEGL06},
  Doi                      = {10.1145/1134650.1134666},
  File                     = {:home/sebastien/ownCloud/share/these Armel/Biblio/sandberg_etal_2006.pdf:PDF;:home/sebastien/Documents/jabrefdb/Sandberg2006.pdf:PDF},
  Owner                    = {sebastien},
  Timestamp                = {Tue, 22 May 2012 15:24:56 +0200},
  Url                      = {http://doi.acm.org/10.1145/1134650.1134666}
}

@Article{Brandner2014,
  Title = {Refinement of worst-case execution time bounds by graph pruning},
  Year = {2014},
  Number = {3-4},
  Pages = {155--170},
  Volume = {40},

  Abstract = {As real-time systems increase in complexity to provide more and more functionality and perform more demanding computations, the problem of statically analyzing the Worst-Case Execution Time (WCET) bound of real-time programs is becoming more and more time-consuming and imprecise.

The problem stems from the fact that with increasing program size, the number of potentially relevant program and hardware states that need to be considered during WCET analysis increases as well. However, only a relatively small portion of the program actually contributes to the final WCET bound. Large parts of the program are thus irrelevant and are analyzed in vain. In the best case this only leads to increased analysis time. Very often, however, the analysis of irrelevant program parts interferes with the analysis of those program parts that turn out to be relevant.

We explore a novel technique based on graph pruning that promises to reduce the analysis overhead and, at the same time, increase the analysis' precision. The basic idea is to eliminate those program parts from the analysis problem that are known to be
irrelevant for the final WCET bound. This reduces the analysis overhead, since only a subset of the program and hardware states have to be tracked. Consequently, more aggressive analysis techniques may be applied, effectively reducing the overestimation of the WCET. As a side-effect, interference from irrelevant program parts is eliminated, e.g., on addresses of memory accesses, on loop bounds, or on the cache or processor state.

First experiments using a commercial WCET analysis tool show that our approach is feasible in practice and leads to reductions of up to 12% when a standard IPET approach is used for the analysis.},
	Author = {Florian Brandner and Alexander Jordan},
	Bibsource = {dblp computer science bibliography, http://dblp.org},
	Biburl = {http://dblp.uni-trier.de/rec/bib/journals/cl/BrandnerJ14},
	Doi = {10.1016/j.cl.2014.09.001},
	File = {:home/sebastien/Documents/jabrefdb/brandner2014.pdf:PDF},
	Journal = {Computer Languages, Systems {\&} Structures},
	Owner = {sebastien},
	Timestamp = {Tue, 09 Dec 2014 14:25:32 +0100},
	Url = {http://dx.doi.org/10.1016/j.cl.2014.09.001},
	Bdsk-Url-1 = {http://dx.doi.org/10.1016/j.cl.2014.09.001}}

@inproceedings{Brandner2012,
	Acmid = {2393000},
	Author = {Brandner, Florian and Hepp, Stefan and Jordan, Alexander},
	Booktitle = {International Conference on Real-Time and Network Systems (RTNS)},
	Doi = {10.1145/2392987.2393000},
	Keywords = {criticality, program analysis, program profiling, worst-case execution time},
	Title = {Static Profiling of the Worst-case in Real-time Programs},
	Url = {http://doi.acm.org/10.1145/2392987.2393000},
	Year = {2012},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2392987.2393000},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2392987.2393000}}
